/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DropdownComponent {
        "label": string;
        "name": string;
        "options": string[];
        "selectedValue": string;
    }
    interface EmployeeDialog {
        "employeeData": any;
        "isOpen": boolean;
    }
    interface EmployerFormComponent {
    }
    interface EmployerTable {
    }
    interface FormComponent {
    }
    interface InputElement {
        "label": any;
        "name": any;
        "type": any;
        "value": any;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface TableComponent {
        "apiFeature": boolean;
        "employerData": any[];
    }
}
export interface DropdownComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDropdownComponentElement;
}
export interface EmployeeDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEmployeeDialogElement;
}
export interface FormComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFormComponentElement;
}
export interface InputElementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInputElementElement;
}
declare global {
    interface HTMLDropdownComponentElementEventMap {
        "valueChange": string;
    }
    interface HTMLDropdownComponentElement extends Components.DropdownComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDropdownComponentElementEventMap>(type: K, listener: (this: HTMLDropdownComponentElement, ev: DropdownComponentCustomEvent<HTMLDropdownComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDropdownComponentElementEventMap>(type: K, listener: (this: HTMLDropdownComponentElement, ev: DropdownComponentCustomEvent<HTMLDropdownComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDropdownComponentElement: {
        prototype: HTMLDropdownComponentElement;
        new (): HTMLDropdownComponentElement;
    };
    interface HTMLEmployeeDialogElementEventMap {
        "closeEmployeeDialog": any;
    }
    interface HTMLEmployeeDialogElement extends Components.EmployeeDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEmployeeDialogElementEventMap>(type: K, listener: (this: HTMLEmployeeDialogElement, ev: EmployeeDialogCustomEvent<HTMLEmployeeDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEmployeeDialogElementEventMap>(type: K, listener: (this: HTMLEmployeeDialogElement, ev: EmployeeDialogCustomEvent<HTMLEmployeeDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEmployeeDialogElement: {
        prototype: HTMLEmployeeDialogElement;
        new (): HTMLEmployeeDialogElement;
    };
    interface HTMLEmployerFormComponentElement extends Components.EmployerFormComponent, HTMLStencilElement {
    }
    var HTMLEmployerFormComponentElement: {
        prototype: HTMLEmployerFormComponentElement;
        new (): HTMLEmployerFormComponentElement;
    };
    interface HTMLEmployerTableElement extends Components.EmployerTable, HTMLStencilElement {
    }
    var HTMLEmployerTableElement: {
        prototype: HTMLEmployerTableElement;
        new (): HTMLEmployerTableElement;
    };
    interface HTMLFormComponentElementEventMap {
        "sendEmployerData": any[];
    }
    interface HTMLFormComponentElement extends Components.FormComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFormComponentElementEventMap>(type: K, listener: (this: HTMLFormComponentElement, ev: FormComponentCustomEvent<HTMLFormComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFormComponentElementEventMap>(type: K, listener: (this: HTMLFormComponentElement, ev: FormComponentCustomEvent<HTMLFormComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFormComponentElement: {
        prototype: HTMLFormComponentElement;
        new (): HTMLFormComponentElement;
    };
    interface HTMLInputElementElementEventMap {
        "inputChanged": { name: string; value: string };
    }
    interface HTMLInputElementElement extends Components.InputElement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInputElementElementEventMap>(type: K, listener: (this: HTMLInputElementElement, ev: InputElementCustomEvent<HTMLInputElementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInputElementElementEventMap>(type: K, listener: (this: HTMLInputElementElement, ev: InputElementCustomEvent<HTMLInputElementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInputElementElement: {
        prototype: HTMLInputElementElement;
        new (): HTMLInputElementElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLTableComponentElement extends Components.TableComponent, HTMLStencilElement {
    }
    var HTMLTableComponentElement: {
        prototype: HTMLTableComponentElement;
        new (): HTMLTableComponentElement;
    };
    interface HTMLElementTagNameMap {
        "dropdown-component": HTMLDropdownComponentElement;
        "employee-dialog": HTMLEmployeeDialogElement;
        "employer-form-component": HTMLEmployerFormComponentElement;
        "employer-table": HTMLEmployerTableElement;
        "form-component": HTMLFormComponentElement;
        "input-element": HTMLInputElementElement;
        "my-component": HTMLMyComponentElement;
        "table-component": HTMLTableComponentElement;
    }
}
declare namespace LocalJSX {
    interface DropdownComponent {
        "label"?: string;
        "name"?: string;
        "onValueChange"?: (event: DropdownComponentCustomEvent<string>) => void;
        "options"?: string[];
        "selectedValue"?: string;
    }
    interface EmployeeDialog {
        "employeeData"?: any;
        "isOpen"?: boolean;
        "onCloseEmployeeDialog"?: (event: EmployeeDialogCustomEvent<any>) => void;
    }
    interface EmployerFormComponent {
    }
    interface EmployerTable {
    }
    interface FormComponent {
        "onSendEmployerData"?: (event: FormComponentCustomEvent<any[]>) => void;
    }
    interface InputElement {
        "label"?: any;
        "name"?: any;
        "onInputChanged"?: (event: InputElementCustomEvent<{ name: string; value: string }>) => void;
        "type"?: any;
        "value"?: any;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface TableComponent {
        "apiFeature"?: boolean;
        "employerData"?: any[];
    }
    interface IntrinsicElements {
        "dropdown-component": DropdownComponent;
        "employee-dialog": EmployeeDialog;
        "employer-form-component": EmployerFormComponent;
        "employer-table": EmployerTable;
        "form-component": FormComponent;
        "input-element": InputElement;
        "my-component": MyComponent;
        "table-component": TableComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dropdown-component": LocalJSX.DropdownComponent & JSXBase.HTMLAttributes<HTMLDropdownComponentElement>;
            "employee-dialog": LocalJSX.EmployeeDialog & JSXBase.HTMLAttributes<HTMLEmployeeDialogElement>;
            "employer-form-component": LocalJSX.EmployerFormComponent & JSXBase.HTMLAttributes<HTMLEmployerFormComponentElement>;
            "employer-table": LocalJSX.EmployerTable & JSXBase.HTMLAttributes<HTMLEmployerTableElement>;
            "form-component": LocalJSX.FormComponent & JSXBase.HTMLAttributes<HTMLFormComponentElement>;
            "input-element": LocalJSX.InputElement & JSXBase.HTMLAttributes<HTMLInputElementElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "table-component": LocalJSX.TableComponent & JSXBase.HTMLAttributes<HTMLTableComponentElement>;
        }
    }
}
